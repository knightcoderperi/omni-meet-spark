
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface EmailRequest {
  recipientEmail: string;
  recipientName: string;
  meetingTitle: string;
  meetingDate: string;
  duration: number;
  attendeeList: string;
  summary: {
    meeting_overview?: string;
    key_discussion_points?: string[];
    decisions_made?: string[];
    action_items?: Array<{
      task: string;
      owner?: string;
      deadline?: string;
      priority: string;
    }>;
    next_steps?: string[];
    important_dates?: Array<{
      date: string;
      event: string;
    }>;
    follow_up_required?: string[];
    key_metrics_mentioned?: string[];
  };
}

const generateEmailHTML = (data: EmailRequest): string => {
  const currentYear = new Date().getFullYear();
  
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Meeting Summary - ${data.meetingTitle}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .section { margin-bottom: 25px; }
        .section h3 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 5px; }
        .action-item { background: #fff3cd; padding: 10px; margin: 5px 0; border-left: 4px solid #ffc107; }
        .decision { background: #d4edda; padding: 10px; margin: 5px 0; border-left: 4px solid #28a745; }
        .footer { background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
        ul { padding-left: 20px; }
        li { margin-bottom: 8px; }
    </style>
</head>
<body>
    <div class="header">
        <h2>Meeting Summary: ${data.meetingTitle}</h2>
        <p><strong>Date:</strong> ${data.meetingDate} | <strong>Duration:</strong> ${data.duration} minutes</p>
        <p><strong>Attendees:</strong> ${data.attendeeList}</p>
    </div>

    ${data.summary.meeting_overview ? `
    <div class="section">
        <h3>ðŸ“‹ Meeting Overview</h3>
        <p>${data.summary.meeting_overview}</p>
    </div>
    ` : ''}

    ${data.summary.key_discussion_points && data.summary.key_discussion_points.length > 0 ? `
    <div class="section">
        <h3>ðŸ’¬ Key Discussion Points</h3>
        <ul>
        ${data.summary.key_discussion_points.map(point => `<li>${point}</li>`).join('')}
        </ul>
    </div>
    ` : ''}

    ${data.summary.decisions_made && data.summary.decisions_made.length > 0 ? `
    <div class="section">
        <h3>âœ… Decisions Made</h3>
        ${data.summary.decisions_made.map(decision => `<div class="decision">${decision}</div>`).join('')}
    </div>
    ` : ''}

    ${data.summary.action_items && data.summary.action_items.length > 0 ? `
    <div class="section">
        <h3>ðŸŽ¯ Action Items</h3>
        ${data.summary.action_items.map(item => `
        <div class="action-item">
            <strong>Task:</strong> ${item.task}<br>
            ${item.owner ? `<strong>Owner:</strong> ${item.owner}<br>` : ''}
            ${item.deadline ? `<strong>Deadline:</strong> ${item.deadline}<br>` : ''}
            <strong>Priority:</strong> ${item.priority}
        </div>
        `).join('')}
    </div>
    ` : ''}

    ${data.summary.next_steps && data.summary.next_steps.length > 0 ? `
    <div class="section">
        <h3>ðŸ”„ Next Steps</h3>
        <ul>
        ${data.summary.next_steps.map(step => `<li>${step}</li>`).join('')}
        </ul>
    </div>
    ` : ''}

    ${data.summary.important_dates && data.summary.important_dates.length > 0 ? `
    <div class="section">
        <h3>ðŸ“… Important Dates</h3>
        ${data.summary.important_dates.map(dateItem => `<p><strong>${dateItem.date}:</strong> ${dateItem.event}</p>`).join('')}
    </div>
    ` : ''}

    ${data.summary.key_metrics_mentioned && data.summary.key_metrics_mentioned.length > 0 ? `
    <div class="section">
        <h3>ðŸ“Š Key Metrics Mentioned</h3>
        <ul>
        ${data.summary.key_metrics_mentioned.map(metric => `<li>${metric}</li>`).join('')}
        </ul>
    </div>
    ` : ''}

    <div class="footer">
        <p>This summary was automatically generated by AI. If you notice any inaccuracies, please contact the meeting host.</p>
        <p>OmniMeet Â© ${currentYear}</p>
    </div>
</body>
</html>
  `;
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const data: EmailRequest = await req.json();

    if (!data.recipientEmail || !data.meetingTitle) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields: recipientEmail and meetingTitle' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const emailHTML = generateEmailHTML(data);
    const subject = `ðŸ“Š Meeting Summary: ${data.meetingTitle} - ${data.meetingDate}`;

    // For now, we'll just log the email that would be sent
    // In a real implementation, you would integrate with SendGrid, AWS SES, or another email service
    console.log(`Would send email to: ${data.recipientEmail}`);
    console.log(`Subject: ${subject}`);
    console.log(`HTML Length: ${emailHTML.length} characters`);

    // Simulate email sending delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    return new Response(
      JSON.stringify({ 
        success: true,
        message: `Email sent successfully to ${data.recipientEmail}`,
        emailSent: {
          to: data.recipientEmail,
          subject: subject,
          timestamp: new Date().toISOString()
        }
      }), 
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Email sending error:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Email service temporarily unavailable',
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
